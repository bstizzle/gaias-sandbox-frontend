[{"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/App.js":"1","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/reportWebVitals.js":"2","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/MainPage.js":"3","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/WeatherScroller.js":"4","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/WeatherDetail.js":"5","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/WeatherForm.js":"6","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/Login.js":"7","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/Header.js":"8","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/Search.js":"9","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/NewWeatherForm.js":"10"},{"size":909,"mtime":1611701503468,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611343784967,"results":"13","hashOfConfig":"12"},{"size":5402,"mtime":1611702277240,"results":"14","hashOfConfig":"12"},{"size":663,"mtime":1611699632595,"results":"15","hashOfConfig":"12"},{"size":1169,"mtime":1611679586541,"results":"16","hashOfConfig":"12"},{"size":3755,"mtime":1611698902535,"results":"17","hashOfConfig":"12"},{"size":1146,"mtime":1611540822687,"results":"18","hashOfConfig":"12"},{"size":667,"mtime":1611541123256,"results":"19","hashOfConfig":"12"},{"size":1108,"mtime":1611696893509,"results":"20","hashOfConfig":"12"},{"size":3190,"mtime":1611702026500,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qkouae",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/App.js",[],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/reportWebVitals.js",[],["44","45"],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/MainPage.js",["46"],"import React, {useState, useEffect} from 'react'\nimport WeatherScroller from \"./WeatherScroller\";\nimport Search from \"./Search\"\nimport { MapContainer, TileLayer, Marker, Popup, FeatureGroup, Rectangle, ImageOverlay } from 'react-leaflet'\nimport WeatherDetail from \"./WeatherDetail\";\nimport WeatherForm from \"./WeatherForm\";\nimport NewWeatherForm from \"./NewWeatherForm\";\n\nfunction MainPage({currentUser}) {\n    const [weathers, setWeathers] = useState([])\n    const [regions, setRegions] = useState([])\n    const [position, setPosition] = useState([37.0902, - 95.7129])\n    \n    useEffect(() => {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/weathers`)\n          .then(resp => resp.json())\n          .then(data => setWeathers(data))\n      }, [])\n\n    useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_BASE_URL}/regions`)\n        .then(resp => resp.json())\n        .then(data => setRegions(data))\n    }, [])\n\n   \n\n    function handleWeatherForm(newFormData) {\n        const updatedWeathers =  weathers.map(weather => {\n            if (weather.id === newFormData.id) {\n                return newFormData;\n            } else {\n                return weather;\n            }\n        })\n        setWeathers(updatedWeathers)\n    }\n\n    function handleNewWeather(newWeather) {\n        const filteredRegions = regions.map((region) => {\n            const newWeathers = [...region.weathers, newWeather]\n            return({\n                name: region.name,\n                latMin: region.latMin,\n                latMax: region.latMax,\n                longMin: region.longMin,\n                longMax: region.longMax,\n                centerLat: region.centerLat,\n                centerLong: region.centerLong,\n                weathers: newWeathers\n            });\n        })\n        setRegions(filteredRegions)\n        setWeathers([...weathers, newWeather])\n    \n\n   function handleDelete(id) {\n       const filteredWeathers = weathers.filter(weather => {\n          return (weather.id !== id) \n       })\n\n       const filteredRegions = regions.map((region) => {\n           const newWeathers = region.weathers.filter((weather) => {\n                return weather.id !== id\n           })\n           return({\n                name: region.name,\n                latMin: region.latMin,\n                latMax: region.latMax,\n                longMin: region.longMin,\n                longMax: region.longMax,\n                centerLat: region.centerLat,\n                centerLong: region.centerLong,\n                weathers: newWeathers\n           });\n       })\n       setRegions(filteredRegions)\n       console.log(filteredRegions)\n       console.log(regions)\n       setWeathers(filteredWeathers)\n    }\n\n    const featureGroups = regions.map((region) => {\n        const rectangle = [\n            [region[\"latMin\"], region[\"longMin\"]],\n            [region[\"latMax\"], region[\"longMax\"]]\n        ]\n\n        if(region.weathers.length > 0){\n            const weather = weathers.find((weather) => {\n                return weather.region.id === region.id\n            })\n\n            return(\n                <FeatureGroup key={region.id}>\n                    <ImageOverlay url=\"https://media.giphy.com/media/3ohzdUimZF7zrY0fWo/giphy.gif\" bounds={rectangle} opacity={0.6} play={false}/>\n                    <Popup>\n                        <div className=\"flip-card\">\n                            <div className=\"flip-card-inner\">\n                                <div className=\"flip-card-front\">\n\n                                    <WeatherDetail region={region} weather={weather} />\n                                </div>\n                                <div className=\"flip-card-back\">\n                                    <WeatherForm region={region} weather={weather} onWeatherFormSubmit={handleWeatherForm} onSetPosition={setPosition} onDelete={handleDelete}/>\n                                </div>\n                            </div>\n                        </div>\n                    </Popup>\n                    <Rectangle bounds={rectangle} />\n                </FeatureGroup>\n            )\n        }else {\n            return(\n                <FeatureGroup key={region.id}>\n                    <ImageOverlay url=\"https://j.gifs.com/vq8EXV.gif\" bounds={rectangle} opacity={0.6} play={false}/>\n                    <Popup>\n                        <NewWeatherForm currentUser={currentUser} region={region} />\n                    </Popup>\n                    <Rectangle bounds={rectangle}/>\n                </FeatureGroup>\n            );\n        }\n    })\n\n    const TheMap = () => {\n\n        return (\n           <MapContainer\n            center={position}\n            zoom={5}\n            style={{ width: '80%', height: '80%', margin: \"auto\" }}\n            >\n                <TileLayer\n                    url='https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png'\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                />\n\n                {featureGroups}\n            \n                <Marker position={position}>\n                </Marker>\n            </MapContainer>\n        )\n    }\n\n\n\n\n   \n    return(\n        <div className=\"main-page\">\n            <WeatherScroller allWeathers={weathers} regions={regions}/>\n            <Search onSetPosition={setPosition} />\n            <TheMap />\n        </div>\n    );\n}\n\nexport default MainPage;","/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/WeatherScroller.js",[],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/WeatherDetail.js",[],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/WeatherForm.js",[],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/Login.js",[],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/Header.js",[],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/Search.js",[],"/Users/cswilik/Flatiron/code/Mod4/gaias-sandbox-frontend/src/Components/NewWeatherForm.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":null,"fatal":true,"severity":2,"message":"51","line":160,"column":1},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"Parsing error: 'import' and 'export' may only appear at the top level\n\n  158 | }\n  159 | \n> 160 | export default MainPage;\n      | ^","no-global-assign","no-unsafe-negation"]